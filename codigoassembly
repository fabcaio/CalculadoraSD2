$MOD51

ORG 0 ;inicia no espaco de memoria 0

;Inicializacao

XH EQU 30H	;MSB X
XL EQU 31H 	;LSB X
YH EQU 32H	;MSB Y
YL EQU 33H 	;LSB Y
ZH EQU 34H 	;MSB Z
ZL EQU 35H 	;LSB Z
TH EQU 36H 	;MSB T
TL EQU 37H 	;LSB T
MEMH EQU 38H 	;MEMORIA PARA STO E RCL
MEML EQU 39H 	;MEMORIA PARA STO E RCL
AUX1H EQU 3AH 	;MSB AUXILIAR 1
AUX1L EQU 3BH 	;LSB AUXILIAR 1
AUX2H EQU 3CH 	;MSB AUXILIAR 2
AUX2L EQU 3DH 	;LSB AUXILIAR 2
F_INI EQU 40H 	;Inicio da fila

;Representacao numerica

SINAL_X BIT 20H.0
SINAL_Y BIT 20H.1
SINAL_Z BIT 20H.2
SINAL_T BIT 20H.3

;Condicoes Anormais

ERRO BIT 20H.4
OVFL BIT 20H.5

;Reset dos registradores

MOV XH, #0H	;Reseta MSB X
MOV XL, #0H	;Reseta LSB X
MOV YH, #0H	;Reseta MSB Y
MOV YL, #0H	;Reseta LSB Y
MOV ZH, #0H	;Reseta MSB Z
MOV ZL, #0H	;Reseta LSB Z
MOV TH, #0H	;Reseta MSB T
MOV TL, #0H	;Reseta LSB T
MOV 20H, #0H	;Reseta o sinal da pilha

MOV A, #0H	;Reseta o acumulador	
MOV B, #0H	;Reseta o registrador B
CLR C		;Reseta o carry

;Teclas

CHS EQU 0AH 	;Mudar sinal de X
CLX EQU 0BH 	;Zerar X
CLS EQU 0CH 	;Zerar a pilha (Clear Stack)
ENTER EQU 0DH 	;"Enter" (PUSH)
DROP EQU 0EH	;POP
SWAP_L EQU 0FH 	;Trocar X e Y
MAIS EQU 10H 	;Y+X
MENOS EQU 11H 	;Y-X
MULT EQU 12H 	;Y*X
DIVI EQU 13H 	;Y/X
MODUL EQU 14H 	;Módulo de Y/X (Resto da divisão)
RRX EQU 15H 	;Rodar Direita
RLX EQU 16H 	;Rodar Esquerda
SRX EQU 17H 	;Shift Direita
SLX EQU 18H 	;Shift Esquerda
QUAD EQU 19H 	;X*X
POW EQU 1AH 	;Y^X
RSUP EQU 1BH 	;Rodar pilha para cima
RSDW EQU 1CH 	;Rodar pilha para baixo
STO EQU 1DH 	;Armazenar X na memória
RCL EQU 1EH 	;Copiar a memoria para X
T_INV EQU 0FFH	;Tecla inválida

;Fila de teste

MOV 40H,#04
MOV 41H,#02
MOV 42H,#0DH
MOV 43H,#03
MOV 44H,#05
MOV 45H,#04
MOV 46H,#10H
MOV 47H,#0FFH

MOV R0, #3FH		; O registrador R0 guarda a posição da fila que está sendo lida
MOV R1, #0		; R1 guarda a posição do dígito

LERFILA:		;Decide se a tecla é numérica ou não
INC R0
CLR C
MOV A, @R0
SUBB A, #0AH		;Essa operação verifica se a tecla é númerica ou não

MOV A, @R0
XRL A, #T_INV		;Verifica se a tecla 0FFH foi apertada
JZ LINF

JC RECEBERN		;Se for numérica vai para a rotina RECEBERN
JMP TECLANN		;Se não for numérica, vai para a rotina TECLANN

LINF:
	SJMP $

RECEBERN:

DIGITO_0:
	CJNE R1, #0, DIGITO_1
	MOV XL, @R0
	INC R1
	LJMP LERFILA


DIGITO_1:
	CJNE R1, #1, DIGITO_2
	MOV A, XL
	MOV B, #10H
	MUL AB
	ADD A, @R0
	MOV XL, A
	INC R1
	LJMP LERFILA

DIGITO_2:
	CJNE R1, #2, DIGITO_3
	MOV A, XL
	MOV B, #10H
	MUL AB
	ADD A, @R0
	MOV XL, A
	MOV XH, B
	INC R1
	LJMP LERFILA

DIGITO_3:
	CJNE R1, #3, D_OVER
	MOV A, XL
	MOV B, #10H
	MUL AB
	ADD A, @R0
	MOV XL, A
	MOV XH, B
	INC R1
	LJMP LERFILA

D_OVER:
	SJMP $ 			; Entra em um laço infinito se o número de dígitos for maior que 4

TECLANN:
	MOV R1, #0H		; Reseta o registrador que conta os dígitos

	CJNE @R0, #MAIS, TE1
	LCALL MAIS_SB
	LCALL DROP_SB
	LJMP LERFILA
TE1:	CJNE @R0, #ENTER, TE2
	LCALL ENTER_SB
	LJMP LERFILA
TE2:	LJMP LERFILA

ENTER_SB:
	MOV TL, ZL
	MOV TH, ZH
	MOV ZL, YL
	MOV ZH, YH
	MOV YL, XL
	MOV YH, XH
	MOV XL, #0H
	MOV XH, #0H

	MOV A, 20H
	RL A
	ANL A, #0EH
	MOV AUX1L, A

	MOV A, 20H
	ANL A, #01H
	ORL A, AUX1L
	MOV 20H, A
	RET

MAIS_SB:
	JB SINAL_X, XNEG
	JB SINAL_Y, YNEG	
	
	XYPOS:
	MOV A, XL
	ADD A, YL
	DA A
	MOV XL, A

	MOV A, XH
	CLR C
	ADDC A, YH
	DA A
	MOV XH, A
	RET

	XNEG:
	MOV AUX1H, XH		;SALVA XH
	MOV AUX1L, XL		;SALVA XL
	JB SINAL_Y, XYPOS
	MOV A, #9AH
	CLR C
	SUBB A, XL		;Calcula o complemento 10 de XL
	DA A
	ADD A, YL
	DA A
	MOV XL, A
	ADDC A, #0H
	MOV AUX2L, A		;Salva o carry

	MOV A, #9AH
	CLR C
	SUBB A, XH		;Calcula o complemento 10 de XH
	DA A
	ADD A, YH
	ADD A, AUX2L
	DA A
	MOV XH, A

	CLR C
	MOV A, AUX1H
	SUBB A, XH
	JC S1			;Vai para S1 se Y>X
	
	CLR C
	MOV A, AUX1L
	SUBB A, XL
	JC S1			;Vai para S1 se Y>X

	MOV A, #9AH
	CLR C
	SUBB A, XL		;Calcula o complemento 10 de XL
	DA A
	MOV A, #9AH
	CLR C
	SUBB A, XH		;Calcula o complemento 10 de XH
	DA A
	
	RET

	S1:
	CLR SINAL_X		;Positiva o sinal do resultado

	RET

	YNEG:
	MOV AUX1H, XH		;SALVA XH
	MOV AUX1L, XL		;SALVA XL
	MOV A, #9AH
	CLR C
	SUBB A, XL		;Calcula o complemento 10 de XL
	DA A
	ADD A, YL
	DA A
	MOV XL, A
	ADDC A, #0H
	MOV AUX2L, A		;Salva o carry

	MOV A, #99H
	CLR C
	SUBB A, XH		;Calcula o complemento 10 de XH
	DA A
	ADD A, YH
	ADD A, AUX2L
	DA A
	MOV XH, A

	CLR C
	MOV A, AUX1H
	SUBB A, YH
	JC S2			;Vai para S2 se Y>X
	
	CLR C
	MOV A, AUX1L
	SUBB A, YL
	JC S2			;Vai para S2 se Y>X

	RET

	S2:
	SETB SINAL_X		;Negativa o sinal do resultado
	MOV A, #9AH
	CLR C
	SUBB A, XL		;Calcula o complemento 10 de XL
	DA A
	MOV A, #99H
	CLR C
	SUBB A, XH		;Calcula o complemento 10 de XH
	DA A

	RET

DROP_SB:
	MOV YL, ZL
	MOV YH, ZH
	MOV ZL, TL
	MOV ZH, TH

	MOV A, 20H
	RR A
	ANL A, #06H
	ORL A, 20H
	MOV AUX1L, A

	MOV A, 20H
	ANL A, #09H
	ORL A, AUX1L
	MOV 20H, AUX1L
	RET
CHS_SB:
	XRL 20H, #01H	;Inverte o bit 20H.0 (SINAL_X)
	RET

CLX_SB:
	MOV XL, #0H
	MOV XH, #0H
	CLR SINAL_X
	RET

CLS_SB:
	MOV XL, #0H
	MOV XH, #0H
	MOV YL, #0H
	MOV YH, #0H
	MOV ZL, #0H
	MOV ZH, #0H
	MOV TL, #0H
	MOV TH, #0H	
	RET

SWAP_SB:
	MOV XH, AUX1H
	MOV XL, AUX1L
	MOV XH, XH
	MOV XL, YL
	MOV YH, AUX1H
	MOV YL, AUX1L
	RET

MENOS_SB:
	XRL 20H, #02H	;Inverte o bit 20H.1 (SINAL_Y)
	LCALL MAIS_SB
	RET

MULT_SB:
	MOV AUX1L, YL
	MOV AUX1H, YH
	MOV YL, XL
	MOV YH, XH
	JB SINAL_X, MU1
	DEC AUX1L

	MU1:
	LCALL MAIS_SB
	DJNZ AUX1L, MU1

	MU2:
	MOV AUX1L, YL
	DJNZ AUX2H, MU1

	JNB SINAL_X, MU3
	JNB SINAL_Y, MU3
	
	SETB SINAL_X
	RET
	
	MU3:
	RET

DIVI_SB:
	MOV AUX1L, #0H
	LCALL MENOS_SB
	DIV1:
	LCALL MAIS_SB
	JNC DIV1
	RET

MODUL_SB:

RRX_SB:
	

RLX_SB:

SRX_SB:

SLX_SB:


QUAD_SB:			;X^2
	MOV YL, XL		; YL=XL
	MOV YH, XH		; YH=XH
	LCALL MULT		; X*(Y=X)
	RET

POW_SB:				;X^Y
	MOV AUX1L, XL		; AUX1L = XL
	MOV AUX1H, XH		; AUX1H = XH

	PWR1:
	MOV YL, XL		; YL=XL
	MOV YH, XH		; YH=XH
	LCALL MULT		; X*X(Y=X)
	DJNZ AUX1L, PWR1	; Se AUX1 =! 0, vai para PWR1

	MOV AUX1L, XL		; AUX1 = XL
	DJNZ AUX1H, PWR1	; Se AUX2 =! 0, vai para PWR1

	RET

RSUP_SB:
	MOV AUX1H, XH
	MOV AUX1L, XL
	MOV XH, TH
	MOV XL, TL
	MOV TH, ZH
	MOV TL, ZL
	MOV ZH, YH
	MOV ZL, YL
	MOV YH, AUX1H
	MOV YL, AUX1L

	MOV A, 20H
	RR A
	ANL A, #0FH
	MOV 20H, A
	RR A
	RR A
	RR A
	RR A
	ORL A, 20H
	ANL A, #0FH
	MOV 20H, A
	RET

RSDW_SB:
	MOV AUX1H, XH
	MOV AUX1L, XL
	MOV XH, YH
	MOV XL, YL
	MOV YH, ZH
	MOV YL, ZL
	MOV ZH, TH
	MOV ZL, TL
	MOV TH, AUX1H
	MOV TL, AUX1L

	MOV A, 20H
	RL A
	ANL A, #0FH
	MOV 20H, A
	RL A
	RL A
	RL A
	RL A
	ORL A, 20H
	ANL A, #0FH
	MOV 20H, A
	RET	

STO_SB:
	MOV MEMH, XH
	MOV MEML, XL
	RET

RCL_SB:
	MOV XH, MEMH
	MOV XL, MEML
	RET
END
